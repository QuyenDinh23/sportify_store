import mongoose from "mongoose";

const voucherSchema = new mongoose.Schema(
  {
    code: {
      type: String,
      required: true,
      unique: true,
      uppercase: true,
      trim: true,
    },
    description: {
      type: String,
      default: "",
    },

    // Lo·∫°i gi·∫£m gi√°: ph·∫ßn trƒÉm ho·∫∑c s·ªë ti·ªÅn c·ªë ƒë·ªãnh
    discountType: {
      type: String,
      enum: ["fixed", "percentage"],
      required: true,
    },

    // Gi√° tr·ªã gi·∫£m (v√≠ d·ª• 10% ho·∫∑c 100000 VND)
    discountValue: {
      type: Number,
      required: true,
      min: 1,
    },

    // Gi√° tr·ªã ƒë∆°n h√†ng t·ªëi thi·ªÉu ƒë·ªÉ √°p d·ª•ng
    minOrderAmount: {
      type: Number,
      default: 0,
    },

    // Gi·ªõi h·∫°n s·ª≠ d·ª•ng to√†n h·ªá th·ªëng (VD: ch·ªâ 1000 l∆∞·ª£t)
    usageLimit: {
      type: Number,
      default: 0, // 0 = kh√¥ng gi·ªõi h·∫°n
    },

    // M·ªói user ƒë∆∞·ª£c d√πng bao nhi√™u l·∫ßn
    usagePerUser: {
      type: Number,
      default: 1,
    },

    // ƒê·∫øm s·ªë l∆∞·ª£t ƒë√£ d√πng th·ª±c t·∫ø
    usedCount: {
      type: Number,
      default: 0,
    },

    // Gi·ªõi h·∫°n theo th·ªùi gian
    startDate: {
      type: Date,
      required: true,
    },
    endDate: {
      type: Date,
      required: true,
    },

    // Gi·ªõi h·∫°n ph·∫°m vi √°p d·ª•ng
    applicableUsers: [{ type: mongoose.Schema.Types.ObjectId, ref: "User" }],

    // Tr·∫°ng th√°i ho·∫°t ƒë·ªông
    isActive: {
      type: Boolean,
      default: true,
    },

    // Lo·∫°i ng∆∞·ªùi d√πng (t√πy ch·ªçn)
    targetUserGroup: {
      type: String,
      enum: ["all", "new", "vip"],
      default: "all",
    },
  },
  {
    timestamps: true,
  }
);

// üß† Index ƒë·ªÉ tƒÉng t·ªëc tra c·ª©u voucher theo m√£
voucherSchema.index({ code: 1 });
voucherSchema.index({ startDate: 1, endDate: 1 });

voucherSchema.pre("save", function (next) {
  const now = new Date();
  if (this.endDate < now) {
    this.isActive = false;
  } else if (this.startDate > now) {
    // Voucher ch∆∞a ƒë·∫øn ng√†y hi·ªáu l·ª±c => c√≥ th·ªÉ cho ph√©p, t√πy y√™u c·∫ßu
    this.isActive = false;
  } else {
    this.isActive = true;
  }
  next();
});

/**
 * üß† Static method: Qu√©t to√†n b·ªô voucher h·∫øt h·∫°n v√† t·∫Øt t·ª± ƒë·ªông
 * => C√≥ th·ªÉ g·ªçi t·ª´ cronjob h√†ng ng√†y ho·∫∑c th·ªß c√¥ng t·ª´ admin dashboard
 */
voucherSchema.statics.deactivateExpiredVouchers = async function () {
  const now = new Date();
  const result = await this.updateMany(
    { endDate: { $lt: now }, isActive: true },
    { $set: { isActive: false } }
  );
  return result.modifiedCount;
};
const Voucher = mongoose.model("Voucher", voucherSchema);
export default Voucher;
